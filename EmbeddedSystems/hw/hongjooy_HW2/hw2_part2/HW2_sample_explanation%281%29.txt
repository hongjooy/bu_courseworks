Total no. of instructions: 21
Total no. of executed instructions: 91
Total no. of clock cycles: 500 cycles
Number of hits to local memory: 5
Total number of executed LD/ST instructions: 15

The following is not output to stdout. It is meant for explanatory purposes only.

1*3 MOV                     3 clock cycles

8xLOOP: = 6*8 instr. executed = 46*8 cycles
{
    1 ST    1 miss each time        40 clock cycles
    2 ADD                           2 clock cycles
    1 CMP                           2 clock cycles
    1 JE                            1 clock cycles
    1 JMP                           1 clock cycles
}
1 ST        1 miss                  40 clock cycles
2 ADD       [R3 = 110]              2 clock cycles
1 CMP                               2 clock cycles
1 JE                                1 clock cycles

1*4 MOV                             4 clock cycles

4xLOOP: = 6*4 instr. executed = 8*4 clock cycles
{
    1 LD    1 hit ([101-110] in mem)    2 clock cycles
    2 ADD                               2 clock cycles
    1 CMP                               2 clock cycles
    1 JE                                1 clock cycles
    1 JMP                               1 clock cycles
}
1 LD    1 hit ([101-110] in mem)    2 clock cycles
2 ADD                               2 clock cycles
1 CMP                               2 clock cycles
1 JE                                1 clock cycles

1 MOV				                1 clock cycles
1 ST	1 miss [120] not in memory  40 clock cycles



MOV Rn, <num> //puts an 8-bit (positive/negative) integer <num> into Rn (range of num: [-128,127]) 

ADD Rn, Rm //performs Rn+Rm, and writes the result in Rn 

ADD Rn, 5 (for example), One where you add a value to a register -CMP Rn, Rm //compares Rn and Rm, typically used with JEJE <Address> //jumps to instruction at <Address> if the last comparison resulted in equalityJMP <Address> //jumps to the instruction at <Address>LD Rn, [Rm] //loads from the address stored in Rm into RnST [Rm], Rn //stores the contents of Rn into the memory address that is in Rm
